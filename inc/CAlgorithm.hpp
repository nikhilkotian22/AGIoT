/*
 * Agora Digital Solutions Inc.
 *************************************************************************************
 * Copyright 2020 Agora Digital Solutions Inc.

 * All rights reserved in Agora Digital Solutions Inc. authored and generated code (including the selection and arrangement of the source code base regardless of the authorship of individual files), but not including any copyright interest(s) owned by a third party related to source code or object code authored or generated by non- Agora Digital Solutions Inc. personnel.
 * Any use, disclosure and/or reproduction of source code is prohibited unless in compliance with the AGORA SOFTWARE DEVELOPMENT KIT LICENSE AGREEMENT.
 *
 */

#ifndef A3A5E23B_C133_EDB5_896B_128EDB7AEE92
#define A3A5E23B_C133_EDB5_896B_128EDB7AEE92

#include "EventSignal.hpp"
#include "IBusClient.hpp"
#include "JSerializer.hpp"

class CAlgorithm : public CWorkerThread
{

public:
    CAlgorithm(){
        m_BusClient = NULL;
        m_Signal = new CEventSignal();
        m_Run = false;
        m_Period = 30000;
    }

    int Initialize(std::string module_name, IBusClient* bus_client, std::string data_endpoint, unsigned int period){
        m_BusClient = bus_client;
        m_DataOutEndpoint = data_endpoint;
        m_ModuleName = module_name;
        m_Run = false;
        m_Period = period;
    }

	virtual ~CAlgorithm(){if (NULL!=m_Signal) delete m_Signal;}
    virtual int Configure(hbm::JSerializer * config_serializer) = 0;
    virtual int Start() = 0;
    virtual int Stop() = 0;
	virtual int Process() = 0;

	virtual int HandleData(hbm::JSerializer * data_serializer) = 0;

protected:

    bool m_Run;

    unsigned int m_Period;

    IBusClient* m_BusClient;
    std::string m_DataOutEndpoint;
    std::string m_ModuleName;

    CEventSignal* m_Signal;

    hbm::JSerializer m_DataOutSerializer;
	
private:

};

#endif /* A3A5E23B_C133_EDB5_896B_128EDB7AEE92 */
