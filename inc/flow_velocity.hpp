/*
 * Agora Digital Solutions Inc.
 *************************************************************************************
 * Copyright 2020 Agora Digital Solutions Inc.

 * All rights reserved in Agora Digital Solutions Inc. authored and generated code (including the selection and arrangement of the source code base regardless of the authorship of individual files), but not including any copyright interest(s) owned by a third party related to source code or object code authored or generated by non- Agora Digital Solutions Inc. personnel.
 * Any use, disclosure and/or reproduction of source code is prohibited unless in compliance with the AGORA SOFTWARE DEVELOPMENT KIT LICENSE AGREEMENT.
 *
 */

#ifndef ACF1D423_9133_EDB5_7E5A_492A46C09141
#define ACF1D423_9133_EDB5_7E5A_492A46C09141

#include "CAlgorithm.hpp"

class FlowVelocity : public CAlgorithm
{

public:
    FlowVelocity();
	~FlowVelocity();
    virtual int Configure(hbm::JSerializer * config_serializer);
    virtual int Start();
    virtual int Stop();
	virtual int Process();

	virtual int HandleData(hbm::JSerializer * data_serializer);

protected:
	
private:

    bool badIOQual;

    double pipeDiameter;
    double pipeCrossSecArea;

    uint16_t valve_position;

    //Algorithm inputs 
    hbm::IO_POINT2_T oilFlow;
    hbm::IO_POINT2_T gasFlow;
    hbm::IO_POINT2_T waterFlow;
    hbm::IO_POINT2_T valveProfile1;
    hbm::IO_POINT2_T valveProfile2;

    //Algorithm outputs
    hbm::IO_POINT2_T oilVelocity;
    hbm::IO_POINT2_T gasVelocity;
    hbm::IO_POINT2_T waterVelocity;
    hbm::IO_POINT2_T valvePosition;
    hbm::IO_POINT2_T valveProfile;

    std::vector<float> profile1_vec;
    std::vector<float> profile2_vec;
    std::vector<float> profile_vec;
    
    // Threading functions
	virtual void thread_run();

};

#endif /* ACF1D423_9133_EDB5_7E5A_492A46C09141 */
