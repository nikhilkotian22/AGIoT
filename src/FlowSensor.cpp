/*
 * Agora Digital Solutions Inc.
 *************************************************************************************
 * Copyright 2020 Agora Digital Solutions Inc.

 * All rights reserved in Agora Digital Solutions Inc. authored and generated code (including the selection and arrangement of the source code base regardless of the authorship of individual files), but not including any copyright interest(s) owned by a third party related to source code or object code authored or generated by non- Agora Digital Solutions Inc. personnel.
 * Any use, disclosure and/or reproduction of source code is prohibited unless in compliance with the AGORA SOFTWARE DEVELOPMENT KIT LICENSE AGREEMENT.
 *
 */

#include "JSerializer.hpp"
#include "FlowSensor.hpp"

FlowSensor FlowSensor::gAppMgrInstance;

FlowSensor::FlowSensor(){

	CModuleComponent::Register("flow_sensor", this);
	m_Run = false;

}


FlowSensor::~FlowSensor(){

}


int FlowSensor::Execute(int ArgCount, char* ArgValues[]){

        sleep(5);
	//m_BusClient->SendReportedState(m_ModuleModel);

	std::string module_id   = "module id";
	std::string device_id   = "device id";
	std::string method_payload = "{ \"message\": \"hello method1\" }";
	std::string method_response;

	if ( NULL != m_Algorithm )
	{
		m_Algorithm->Start();
	}

	while(m_Run)
	{

#ifdef ENABLE_INVOKE_METHODS	
	if ( m_Methods.size() > 0 )
	{
		m_BusClient->InvokeModuleMethod(device_id, module_id, m_Methods[0], method_payload, 2, method_response);
	}
#endif
	//m_BusClient->SendReportedState(m_ModuleModel);
		
	sleep(60);

	}

	return 0;
}


CModuleComponent * FlowSensor::GetInstance(){

	return  &gAppMgrInstance;
}


const std::string FlowSensor::GetName(){

	return  m_Name;
}


const std::string FlowSensor::GetVersion(){

	return  m_Version;
}


int FlowSensor::Initialize(std::string Configuration){

	int ret_val = 0;

	LOG_INFO_(STARTUP_LOG) << "*********** Initialize() ************";

	hbm::JSerializer* config_serializer = new hbm::JSerializer();

	ret_val = config_serializer->Initialize(Configuration);

	if ( 0 == ret_val)
	{
		ret_val = config_serializer->GetValue("Name", m_Name);
		ret_val = config_serializer->GetValue("Version", m_Version);

		if ( ( 0 == ret_val ) && ( NULL != m_BusClient ) )
		{
			std::string bus_client_config_j;

			ret_val += config_serializer->GetJString("Components.BusClient.Config", bus_client_config_j);
			m_BusClient->Initialize(bus_client_config_j);

			ret_val += config_serializer->GetValue("InEndpoints.Data", m_DataInEndpoint);
			ret_val += config_serializer->GetValue("OutEndpoints.Data", m_DataOutEndpoint);
			ret_val += config_serializer->GetStringVector("Methods", m_Methods);

			//Setup data-in handler
            m_BusClient->AddDataHandler(m_DataInEndpoint,  this);
			//Setup twin change handler
			m_BusClient->AddPropertyChangeHdnlr("module_twin", this);

			m_StateRspnsHndlr = new (std::nothrow) StateRspnsHndlr();
			if ( NULL != m_StateRspnsHndlr )
			{
				m_BusClient->AddReportedPropertyRspnsHdnlr("module_twin", m_StateRspnsHndlr);
			}
			else
			{
				ret_val = -3;
			}

			//Add method handlers .. these are just generic one, for your app you might want add the proper ones 
			//that can execute the actions
			DirectMethodHndlr* method_hndlr;
			for (int i=0; i<m_Methods.size(); i++)
			{
				method_hndlr = new (std::nothrow) DirectMethodHndlr(m_Methods[i]);
				if ( NULL != method_hndlr )
				{
					m_BusClient->AddMethodHndlr(m_Methods[i], method_hndlr);
				}
				else
				{
					ret_val = -3;
				}

			}

			m_Algorithm = (CAlgorithm*) new FlowVelocity();

			if ( NULL != m_Algorithm)
			{
				std::string flow_config_j;
				ret_val += config_serializer->GetJString("Config", flow_config_j);
				m_ConfigSerializer.Initialize(flow_config_j);

				m_Algorithm->Initialize(m_Name, m_BusClient, m_DataOutEndpoint, 10000);
		        m_Algorithm->Configure(&m_ConfigSerializer);
			}

			//You can also decide to run based on the error
			if ( ret_val == 0 )
			{
				m_BusClient->SetRunMode(START);
			}
		}
		else
		{
			ret_val = -2;
		}

	}
	else
	{
		ret_val = -1;
	}

   /*
	* Now let's build the module model, which includes:
	*   1. Name 
	*   2. Version
	*   3. List of methods 
	*   4. Default properties 
	*/
    
	hbm::JSerializer* model_serializer = new hbm::JSerializer();

	std::string model_str;

	ret_val += model_serializer->SetValue("Name",    m_Name);
	ret_val += model_serializer->SetValue("Version", m_Version);

	ret_val += config_serializer->GetJString("Methods", model_str);
	ret_val += model_serializer->SetValue("Methods", model_str);
	ret_val += config_serializer->GetJString("Config",  model_str);
	ret_val += model_serializer->SetValue("Config", model_str);

	ret_val += model_serializer->GetAll(m_ModuleModel);

	std::cout << "INFO Module Model: " << m_ModuleModel << std::endl;

	delete config_serializer;
	delete model_serializer;

	if (ret_val == 0)
	{
		m_Run = true;
	}

	return ret_val;
}


void FlowSensor::Restart(){

}


int FlowSensor::Terminate(){

	m_BusClient->SetRunMode(TERMINATE);

	pthread_join( *m_BusClient->get_thread(), NULL );
	pthread_detach( *m_BusClient->get_thread() );

	if ( NULL != m_Algorithm)
	{
		m_Algorithm->Stop();
		pthread_join( *m_Algorithm->get_thread(), NULL );
		pthread_detach( *m_Algorithm->get_thread() );
	}

	m_Run = false;

	return 0;
}


void FlowSensor::SetName(std::string Name){

}


void FlowSensor::SetVersion(std::string Version){

}

int FlowSensor::HandleData(std::string & payload)
{
	std::cout << __func__ << ":  New data received by " << m_Name << ":\n"<<payload << std::endl;

	m_DataSerializer.Initialize(payload);

	if ( NULL != m_Algorithm )
	{
		m_Algorithm->HandleData(&m_DataSerializer);
	}

	return 0;
}

int FlowSensor::HandleProp(std::string & payload){

	m_ConfigSerializer.Initialize(payload);

	if ( NULL != m_Algorithm )
	{
		m_Algorithm->Configure(&m_ConfigSerializer);
	}

}
